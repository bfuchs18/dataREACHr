efcr_data <- efcr_data[c('participant_id', 'session_id', 'visit_date', names(efcr_data)[grepl('efcr', names(efcr_data))])]
names(efcr_data)
efcr_scored <- dataprepr::score_efcr(efcr_data, base_zero = TRUE, id = 'participant_id')
## CHAOS Data  ####
chaos_data <- data[, grepl('_id|chaos|visit_date', names(data))]
# remove extra columns, add columns, and re-order
chaos_data <- chaos_data[c('participant_id', 'session_id', 'visit_date', names(chaos_data)[grepl('chaos', names(chaos_data))])]
names(chaos_data)
# need to develop score script
chaos_scored <- dataprepr::score_chaos(chaos_data, base_zero = TRUE, id = 'participant_id')
## PSS Data  (percieved stress scale) ####
pss_data <- data[, grepl('_id|pss|visit_date', names(data))]
# remove extra columns, add columns, and re-order
pss_data <- pss_data[c('participant_id', 'session_id', 'visit_date', names(pss_data)[grepl('pss', names(pss_data))])]
names(pss_data)
pss_scored <- dataprepr::score_pss(pss_data, base_zero = TRUE, id = 'participant_id')
## LBC Data  ####
lbc_data <- data[, grepl('_id|lbc|visit_date', names(data))]
# rename columns
names(lbc_data) <- gsub('lbc_', 'lbc', names(lbc_data))
names(lbc_data) <- gsub('_a', '_conf', names(lbc_data))
# remove extra columns, add columns, and re-order
lbc_data <- lbc_data[, -grep('missingcheck|timestamp', names(lbc_data))]
lbc_data <- lbc_data[c('participant_id', 'session_id', 'visit_date', names(lbc_data)[grepl('lbc', names(lbc_data))])]
lbc_scored <- dataprepr::score_lbc(lbc_data, base_zero = TRUE, id = 'participant_id')
names(child_visit_1_arm_1)
data = child_visit_1_arm_1
# update name of participant ID column
names(data)[names(data) == 'record_id'] <- 'participant_id'
# add session column
data['session_id'] <- 'ses-1'
## visit data ####
visit_data_child <- data[grepl('participant_id|notes|v1_date', names(data))]
names(visit_data_child)[names(visit_data_child) == 'v1_post_check_notes'] <- 'v1_notes'
names(visit_data_child)
names(data)[names(data) == 'v1_date'] <- 'visit_date'
## food paradigm information (does not include intake and freddy values) ####
food_paradigm_info <- data[, grepl('_id|meal|advertisement_condition|visit_date', names(data))]
names(data)
## food paradigm information (does not include intake and freddy values) ####
food_paradigm_info <- data[, grepl('_id|meal|advertisement_condition|visit_date', names(data))]
names(food_paradigm_info)
# remove extra columns and re-order
food_paradigm_info <- food_paradigm_info[, !grepl('freddy|consumed', names(food_paradigm_info))]
names(food_paradigm_info) <- gsub('intake_notes', 'prep_notes', names(food_paradigm_info))
food_paradigm_info <- food_paradigm_info[c('participant_id', 'session_id', 'visit_date', names(food_paradigm_info)[grepl('meal', names(food_paradigm_info))])]
names(food_paradigm_info)
## intake_data -- this data can be used for prelim analyses, but eventually will be replaced with double entry data
intake_data_notde <- data[, grep("_id|plate|visit_date", names(data))]
## intake_data -- this data can be used for prelim analyses, but eventually will be replaced with double entry data
intake_data <- data[, grep("_id|plate|visit_date", names(data))]
# remove extra columns and re-order
intake_data <- intake_data[c('participant_id', 'session_id', names(intake_data)[grepl('plate', names(intake_data))])]
names(intake_data)
## intake_data -- this data can be used for prelim analyses, but eventually will be replaced with double entry data
intake_data <- data[, grep("_id|plate|visit_date", names(data))]
# remove extra columns and re-order
intake_data <- intake_data[c('participant_id', 'session_id', 'visit_date', names(intake_data)[grepl('plate', names(intake_data))])]
names(intake_data)
## freddy data (NO double entry data) ####
freddy_data <- data[, grepl('_id||freddy|visit_date', names(data))]
names(freddy_data)
## freddy data (NO double entry data) ####
freddy_data <- data[, grepl('_id|freddy|visit_date', names(data))]
## freddy data (NO double entry data) ####
freddy_data <- data[, grepl('_id|freddy|visit_date', names(data))]
names(freddy_data)
# remove extra columns and re-order
freddy_data <- freddy_data[, -grep('check|visit_number', names(freddy_data))]
names(freddy_data) <- gsub('freddy', 'fullness', names(freddy_data))
freddy_data <- freddy_data[c('participant_id', 'session_id', names(freddy_data)[grepl('fullness', names(freddy_data))])]
names(freddy_data)
## vas food liking (eah and meal foods) ####
liking_data <- data[, grepl('_id|vas|visit_date', names(data))]
## vas food liking (eah and meal foods) ####
liking_data <- data[, grepl('_id|vas|visit_date', names(data))]
# remove extra columns and re-order
liking_data <- liking_data[, !grepl('pre_vas_freddy', names(liking_data))]
## vas food liking (eah and meal foods) ####
liking_data <- data[, grepl('_id|vas|visit_date', names(data))]
# remove extra columns and re-order
liking_data <- liking_data[, !grepl('pre_vas_freddy', names(liking_data))]
liking_data <- liking_data[c('participant_id', 'session_id', 'visit_date', names(liking_data)[grepl('vas', names(liking_data))])]
# Update names
names(liking_data) <- gsub('vas', 'liking', names(liking_data))
names(liking_data) <- gsub('cookie', 'oreo', names(liking_data))
names(liking_data)
## kbas data ####
kbas_data <- data[, grepl('_id|toy_|food_|^q.*score|visit_date', names(data))]
# process data
kbas_data <- util_format_kbas_data(kbas_data)
names(kbas_data)
source("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/cogNEATO_tools/dataREACHr/R/util_format_kbas_data.R")
# process data
kbas_data <- util_format_kbas_data(kbas_data)
names(kbas_data)
## kbas data ####
kbas_data <- data[, grepl('_id|toy_|food_|^q.*score|visit_date', names(data))]
# process data
kbas_data <- util_format_kbas_data(kbas_data)
names(kbas_data)
## kbas data ####
kbas_data <- data[, grepl('_id|toy_|food_|^q.*score|visit_date', names(data))]
## kbas data ####
kbas_data <- data[, grepl('_id|toy_|food_|^q.*score|visit_date', names(data))]
# remove extra columns and re-order
kbas_data <- kbas_data[c('participant_id', 'session_id', 'visit_date', names(kbas_data)[grepl('toy_|food_|^q.*score', names(kbas_data))])]
names(kbas_data)
# process data
kbas_data <- util_format_kbas_data(kbas_data)
names(kbas_data)
source("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/cogNEATO_tools/dataREACHr/R/util_format_kbas_data.R")
kbas_data <- data[, grepl('_id|toy_|food_|^q.*score|visit_date', names(data))]
# remove extra columns and re-order
kbas_data <- kbas_data[c('participant_id', 'session_id', 'visit_date', names(kbas_data)[grepl('toy_|food_|^q.*score', names(kbas_data))])]
# process data
kbas_data <- util_format_kbas_data(kbas_data)
## kbas data ####
kbas_data <- data[, grepl('_id|toy_|food_|^q.*score|visit_date', names(data))]
# remove extra columns and re-order
kbas_data <- kbas_data[c('participant_id', 'session_id', 'visit_date', names(kbas_data)[grepl('toy_|food_|^q.*score', names(kbas_data))])]
source("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/cogNEATO_tools/dataREACHr/R/util_format_kbas_data.R")
# process data
kbas_data <- util_format_kbas_data(kbas_data)
names(kbas_data)
source("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/cogNEATO_tools/dataREACHr/R/util_format_kbas_data.R")
bas_data <- data[, grepl('_id|toy_|food_|^q.*score|visit_date', names(data))]
# remove extra columns and re-order
kbas_data <- kbas_data[c('participant_id', 'session_id', 'visit_date', names(kbas_data)[grepl('toy_|food_|^q.*score', names(kbas_data))])]
# process data
kbas_data <- util_format_kbas_data(kbas_data)
names(kbas_data)
## kbas data ####
kbas_data <- data[, grepl('_id|toy_|food_|^q.*score|visit_date', names(data))]
# remove extra columns and re-order
kbas_data <- kbas_data[c('participant_id', 'session_id', 'visit_date', names(kbas_data)[grepl('toy_|food_|^q.*score', names(kbas_data))])]
# process data
kbas_data <- util_format_kbas_data(kbas_data)
names(kbas_data)
## stq data ####
stq_data <-data[, grepl('_id|stq|visit_date', names(data))]
# remove extra columns and re-order
stq_data <- stq_data[c('participant_id', 'session_id', 'visit_date', names(stq_data)[grepl('stq', names(stq_data))])]
## anthro data -- this data can be used for prelim analyses, but eventually will be replaced with double entry data ####
anthro_data <- data[, grepl('_id|height|weight|visit_date', names(data))]
names(anthro_data)
# remove extra columns and re-order
anthro_data <- anthro_data[, !grepl('dxa|v1_|check|notes', names(anthro_data))]
names(anthro_data)
# remove extra columns and re-order
anthro_data <- anthro_data[, !grepl('dxa|v1_|check|notes|cooked', names(anthro_data))]
anthro_data <- anthro_data[c('participant_id', 'session_id', 'visit_date' names(anthro_data)[grepl('height|weight', names(anthro_data))])]
anthro_data <- anthro_data[c('participant_id', 'session_id', 'visit_date', names(anthro_data)[grepl('height|weight', names(anthro_data))])]
# rename columns
names(anthro_data) <- gsub('parent_', 'parent1_', names(anthro_data))
names(anthro_data) <- gsub('parent1_height_sex', 'parent1_sex', names(anthro_data))
names(anthro_data) <- gsub('child_average_weight', 'child_weight_average', names(anthro_data))
# re-label parent1 sex
anthro_data$parent1_sex <- ifelse(anthro_data$parent1_sex == 0, 'female', ifelse(anthro_data$parent1_sex == 1, 'male', NA))
names9anthro_data
names(anthro_data)
source("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/cogNEATO_tools/dataREACHr/R/json_v1_anthro.R")
names(child_visit_2_arm_1)
data = child_visit_2_arm_1
# update name of participant ID column
names(data)[names(data) == "record_id"] <- "participant_id"
# update date
names(data)[names(data) == "v2_date"] <- "visit_date"
# add session column
data['session_id'] <- 'ses-1'
## visit data ####
visit_data_child <- data[grepl('participant_id|notes|v5_date', names(data))]
source("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/cogNEATO_tools/dataREACHr/R/util_redcap_child_v1.R", echo = TRUE)
## visit data ####
visit_data_child <- data[grepl('participant_id|notes|v2_date', names(data))]
names(visit_data_child)
names(visit_data_child)[names(visit_data_child) == 'v2_post_check_notes'] <- 'v5_notes'
names(data)[names(data) == 'v2_date'] <- 'visit_date'
data$visit_date
data['visit_date'] <- lubridate::as_date(data[['visit_date']])
data['visit_date']
data$visit_date
## visit data ####
visit_data_child <- data[grepl('participant_id|notes|v2_date', names(data))]
names(visit_data_child)
names(visit_data_child)[names(visit_data_child) == 'v2_post_check_notes'] <- 'v2_notes'
names(data)[names(data) == 'v2_date'] <- 'visit_date'
data['visit_date'] <- lubridate::as_date(data[['visit_date']])
## MRI notes ####
mri_info <- data[, grepl('_id|mri|cams|freddy|visit_date', names(data))]
mri_info <- mri_info[, !grepl('resting|freddy_visit_number', names(mri_info))]
names(mri_info)
mri_info <- mri_info[c('participant_id', 'session_id', 'visit_date', names(mri_info)[grepl('mri|cams|freddy', names(mri_info))])]
names(mri_info)
# fix names
names(mri_info) <- gsub('run_', 'run', names(mri_info))
names(mri_info) <- gsub('snack_1', 'snack', names(mri_info))
names(mri_info) <- gsub('snack_2', 'snack2', names(mri_info))
names(mri_info) <- gsub('_check', '', names(mri_info))
names(mri_info)[names(mri_info) == 'post_snack_1_freddy_check'] <- 'post_snack_freddy_check'
# Replace 'freddy' with 'fullness'
names(mri_info) <- gsub('freddy', 'fullness', names(mri_info))
names(mri_info)
## MRI behavioral assessment ####
mri_assessment_data <- data[, grepl('_id|_familiarity|_recall|_liking|visit_date', names(data))]
# remove extra columns, add columns, and re-order
mri_assessment_data <- mri_assessment_data[c('participant_id', 'session_id', 'visit_date', names(mri_assessment_data)[grepl('_familiarity|_recall|_liking', names(mri_assessment_data))])]
names(mri_assessment_data)
data = child_visit_3_arm_1
# update name of participant ID column
names(data)[names(data) == 'record_id'] <- 'participant_id'
# add session column
data['session_id'] <- 'ses-1'
## visit data ####
visit_data_child <- data[grepl('participant_id|notes|v2_date', names(data))]
## visit data ####
visit_data_child <- data[grepl('participant_id|notes|v3_date', names(data))]
names(visit_data_child)
names(data)[names(data) == 'v3_date'] <- 'visit_date'
data['visit_date'] <- lubridate::as_date(data[['visit_date']])
# food paradigm information (does not include intake and freddy values)
food_paradigm_info <- data[, grepl('_id|meal|advertisement_condition|eah|visit_date', names(data))]
# remove extra columns and re-order
names(food_paradigm_info) <- gsub('intake_notes', 'prep_notes', names(food_paradigm_info))
food_paradigm_info <- food_paradigm_info[, !grepl('complete|freddy|wanting|consumed|intake|water', names(food_paradigm_info))]
food_paradigm_info <- food_paradigm_info[c('participant_id', 'session_id', 'visit_date', 'advertisement_condition', names(food_paradigm_info)[grepl('meal|eah', names(food_paradigm_info))])]
# eah wanting ####
eah_wanting <- data[, grepl('_id|advertisement_condition|wanting|visit_date', names(data))]
# remove extra columns and re-order
eah_wanting <- eah_wanting[c('participant_id', 'session_id', 'visit_date', 'advertisement_condition', names(eah_wanting)[grepl('wanting', names(eah_wanting))])]
names(eah_wanting)
names(food_paradigm_info)
## intake_data -- this data can be used for prelim analyses, but eventually will be replaced with double entry data ####
intake_data <- data[, grepl('_id|plate|advertisement_condition|visit_date', names(data))]
# remove extra columns and re-order
intake_data <- intake_data[c('participant_id', 'session_id', 'visit_date', 'advertisement_condition', names(intake_data)[grepl('plate', names(intake_data))])]
# vas food liking (eah and meal foods) ####
liking_data <- data[, grepl('_id|vas|advertisement_condition|visit_date', names(data))]
# remove extra columns and re-order
liking_data <- liking_data[, !grepl('pre_vas_freddy', names(liking_data))]
liking_data <- liking_data[c('participant_id', 'session_id', 'visit_date', 'advertisement_condition', names(liking_data)[grepl('vas', names(liking_data))])]
# fix variable names
names(liking_data) <- gsub('cookie', 'oreo', names(liking_data))
names(liking_data) <- gsub('vas', 'liking', names(liking_data))
names(liking_data)
# vas food liking (eah and meal foods) ####
liking_data <- data[, grepl('_id|vas|advertisement_condition|visit_date', names(data))]
# remove extra columns and re-order
liking_data <- liking_data[, !grepl('pre_vas_freddy', names(liking_data))]
liking_data <- liking_data[c('participant_id', 'session_id', 'visit_date', 'advertisement_condition', names(liking_data)[grepl('vas', names(liking_data))])]
names(liking_data)
# vas food liking (eah and meal foods) ####
liking_data <- data[, grepl('_id|vas|advertisement_condition|visit_date', names(data))]
names(liking_data)
names(data)
## sleep log ####
sleeplog_data <- data[, grepl('_id|date|bedtime|asleep|attempt|times|waso|awake|out_on|rating|comment|visit_date', names(data))]
names(sleeplog_data)
# remove extra columns and re-order
sleeplog_data <- sleeplog_data[c('participant_id', 'session_id', 'visit_date', names(sleeplog_data)[grepl('date|bedtime|asleep|attempt|times|waso|awake|out_on|rating|comment', names(sleeplog_data))])]
names(sleeplog_data)
sleeplog_data <- util_format_sleep_data(sleeplog_data)
names(sleeplog_data)
source("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/cogNEATO_tools/dataREACHr/R/json_v1_liking.R", echo = TRUE)
data = child_visit_4_arm_1
# update name of participant ID column
names(data)[names(data) == 'record_id'] <- 'participant_id'
# add session column
data$session_id <- 'ses-1'
## visit data ####
visit_data_child <- data[grepl('participant_id|notes|v4_date', names(data))]
names(visit_data_child)[names(visit_data_child) == 'v4_post_check_notes'] <- 'v4_post_notes'
names(visit_data_child)[names(visit_data_child) == 'v5_pre_check_notes'] <- 'v4_pre_notes'
names(data)[names(data) == 'v4_date'] <- 'visit_date'
data - parent_visit_2_arm_1
data = parent_visit_2_arm_1
# update name of participant ID column
names(data)[names(data) == 'record_id'] <- 'participant_id'
# add session column
data['session_id'] <- 'ses-1'
# merge with date data for V2
data <- merge(data, date_data[c('participant_id', 'v2_date', 'v2_age', 'sex')], by = 'participant_id', all.x = TRUE)
names(data)[names(data) == 'v2_date'] <- 'visit_date'
data['visit_date'] <- lubridate::as_date(data[['visit_date']])
## Update form Data ####
visit_data_parent <- data[, grepl('_id|update|visit_date', names(data))]
# remove extra columns and re-order
visit_data_parent <- visit_data_parent[, !grepl('contact|moving', names(visit_data_parent))]
visit_data_parent <- visit_data_parent[c('participant_id', 'session_id', 'visit_date', names(visit_data_parent)[grepl('update', names(visit_data_parent))])]
# rename columns
names(visit_data_parent) <- gsub('_form', '', names(visit_data_parent))
names(visit_data_parent)[names(visit_data_parent) == 'update_med_history_2'] <- 'update_med_history_desc'
names(visit_data_parent)[names(visit_data_parent) == 'update_prescription_2'] <- 'update_prescription_desc'
names(visit_data_parent)[names(visit_data_parent) == 'update_dental_2'] <- 'update_dental_desc'
names(visit_data_parent)[names(visit_data_parent) == 'update_new_illness_2'] <- 'update_new_illness_desc'
names(visit_data_parent)[names(visit_data_parent) == 'update_diet_change_2'] <- 'update_diet_change_desc'
names(visit_data_parent)
## CBQ Data ####
cbq_data <- data[, grepl('_id|cbq|visit_date', names(data))]
# remove extra columns and re-order
cbq_data <- cbq_data[, !grepl('missingcheck', names(cbq_data))]
cbq_data <- cbq_data[c('participant_id', 'session_id', 'visit_date', names(cbq_data)[grepl('cbq', names(cbq_data))])]
# score
cbq_scored <- dataprepr::score_cbq(cbq_data, base_zero = TRUE, id = 'participant_id', does_not_apply_value = 7)
## BRIEF Data ####
brief_data <- data[, grepl('_id|brief|visit_date|age|sex', names(data))]
# remove extra columns and re-order
brief_data <- brief_data[, !grepl('missing_check|timestamp', names(brief_data))] # remove extra columns
brief_data <- brief_data[c('participant_id', 'session_id', 'visit_date', 'v2_age', 'sex', names(brief_data)[grepl('brief', names(brief_data))])]
# score
brief_scored <- dataprepr::score_brief2(brief_data, age_var = 'v2_age', sex_var = 'sex', base_zero = TRUE, male = 'male', female = 'female', id = 'participant_id')
## CSHQ Data ####
cshq_data <- data[, grepl('_id|cshq|visit_date', names(data))]
# remove extra columns and re-order
cshq_data <- cshq_data[, !grepl('missingcheck|timestamp', names(cshq_data))]
cshq_data <- cshq_data[c('participant_id', 'session_id', 'visit_date', names(cshq_data)[grepl('cshq', names(cshq_data))])]
# score
cshq_data <- util_format_cshq_data(cshq_data)
cshq_scored <- dataprepr::score_cshq(cshq_data, base_zero = FALSE, reverse_score = FALSE, id = 'participant_id')
## BES Data ####
bes_data <- data[, grepl('_id|bes|visit_date', names(data))]
# remove extra columns and re-order
bes_data <- bes_data[, !grepl('missingcheck|timestamp', names(bes_data))]
bes_data <- bes_data[c('participant_id', 'session_id', 'visit_date', names(bes_data)[grepl('bes', names(bes_data))])]
# change pna ('Don't want to answer') responses to 99
bes_data[, grepl('bes', names(bes_data))] <- sapply(bes_data[, grepl('bes', names(bes_data))], function(x) ifelse(x == 4, 99, x))
bes_data[, grepl('_6|13|14|15|16', names(bes_data))] <- sapply(bes_data[, grepl('_6|13|14|15|16', names(bes_data))], function(x) ifelse(x == 3, 99, x))
# score
bes_scored <- dataprepr::score_bes(bes_data, base_zero = TRUE, pna = 99, id = 'participant_id')
## FFBS Data ####
ffbs_data <- data[, grepl('_id|ffbs|visit_date', names(data))]
# relocate columns
ffbs_data <- ffbs_data[c('participant_id', 'session_id', 'visit_date', names(ffbs_data)[grepl('ffbs', names(ffbs_data))])]
#score
ffbs_scored <- dataprepr::score_ffbs(ffbs_data, base_zero = TRUE, id = 'participant_id')
## FSQ Data (feeding strategies questionnaire) ####
fsq_data <- data[, grepl('_id|fsq|visit_date', names(data))]
# remove extra columns and re-order
fsq_data <- fsq_data[, !grepl('missingcheck|timestamp', names(fsq_data))]
fsq_data <- fsq_data[c('participant_id', 'session_id', 'visit_date', names(fsq_data)[grepl('fsq', names(fsq_data))])]
# remove extra columns and re-order
fsq_data <- fsq_data[, !grepl('missingcheck|timestamp', names(fsq_data))]
fsq_data <- fsq_data[c('participant_id', 'session_id', 'visit_date', names(fsq_data)[grepl('fsq', names(fsq_data))])]
names(parent_visit_3_arm_1)
data = parent_visit_3_arm_1
# update name of participant ID column
names(data)[names(data) == 'record_id'] <- 'participant_id'
# add session column
data['session_id'] <- 'ses-1'
# merge with date data for V3
data <- merge(data, date_data[c('participant_id', 'v3_date')], by = 'participant_id', all.x = TRUE)
names(data)[names(data) == 'v3_date'] <- 'visit_date'
data['visit_date'] <- lubridate::as_date(data[['visit_date']])
## Update form Data ####
visit_data_parent <- data[, grep('_id|update|visit_date', names(data))]
# remove extra columns and re-order
visit_data_parent <- visit_data_parent[, -grep('contact|moving', names(visit_data_parent))]
visit_data_parent <- visit_data_parent[c('participant_id', 'session_id', 'visit_date', names(visit_data_parent)[grepl('update', names(visit_data_parent))])]
# rename columns
names(visit_data_parent) <- gsub('_form', '', names(visit_data_parent))
names(visit_data_parent)[names(visit_data_parent) == 'update_med_history_2'] <- 'update_med_history_desc'
names(visit_data_parent)[names(visit_data_parent) == 'update_prescription_2'] <- 'update_prescription_desc'
names(visit_data_parent)[names(visit_data_parent) == 'update_dental_2'] <- 'update_dental_desc'
names(visit_data_parent)[names(visit_data_parent) == 'update_new_illness_2'] <- 'update_new_illness_desc'
names(visit_data_parent)[names(visit_data_parent) == 'update_diet_change_2'] <- 'update_diet_change_desc'
visit_data_json <- json_parent_updates()
## SPSRQ Data ####
spsrq_data <- data[, grepl('_id|spsrq|visit_date', names(data))]
# remove extra columns and re-order
spsrq_data <- spsrq_data[c('participant_id', 'session_id', 'visit_date', names(spsrq_data)[grepl('spsrq', names(spsrq_data))])]
spsrq_scored <- dataprepr::score_spsrq(spsrq_data, base_zero = TRUE, id = 'participant_id')
## PWLB Data ####
pwlb_data <- data[, grepl('_id|pwlb|visit_date', names(data))]
# remove extra columns and re-order
pwlb_data <- pwlb_data[, -grep('missingcheck|timestamp', names(pwlb_data))]
pwlb_data <- pwlb_data[c('participant_id', 'session_id', 'visit_date', names(pwlb_data)[grepl('pwlb', names(pwlb_data))])]
# update names
names(pwlb_data)[names(pwlb_data) == 'pwlb_24a'] <- 'pwlb_other_desc'
pwlb_scored <- dataprepr::score_pwlb(pwlb_data, base_zero = TRUE, id = 'participant_id', extra_scale_cols = c('pwlb_other_desc'))
## TFEQ Data ####
#note: REACH used tfeq-r18 (revised scale)
tfeq_data <- data[, grepl('_id|tfeq|visit_date', names(data))]
# remove extra columns and re-order
tfeq_data <- tfeq_data[c('participant_id', 'session_id', 'visit_date', names(tfeq_data)[grepl('tfeq', names(tfeq_data))])]
tfeq_scored <- dataprepr::score_tfeq18(tfeq_data, base_zero = TRUE, id = 'participant_id')
## BISBAS Data ####
bisbas_data <- data[, grepl('_id|bisbas|visit_date', names(data))]
# remove extra columns and re-order
bisbas_data <- bisbas_data[c('participant_id', 'session_id', 'visit_date', names(bisbas_data)[grepl('bisbas', names(bisbas_data))])]
bisbas_scored <- dataprepr::score_bisbas(bisbas_data, base_zero = TRUE, id = 'participant_id')
## pstca Data ####
pstca_data <- data[, grepl('_id|pstca|ptsca|visit_date', names(data))]
# remove extra columns and re-order
pstca_data <- pstca_data[, !grepl('missingcheck|timestamp', names(pstca_data))] # remove extra columns
pstca_data <- pstca_data[c('participant_id', 'session_id', 'visit_date', names(pstca_data)[grepl('ptsca', names(pstca_data))])]
# fix scale names
names(pstca_data) <- gsub('ptsca', 'pstca', names(pstca_data))
## DEBQ Data ####
debq_data <- data[, grepl('_id|debq|visit_date', names(data))]
# remove extra columns and re-order
debq_data <- debq_data[c('participant_id', 'session_id', 'visit_date', names(debq_data)[grepl('debq', names(debq_data))])]
# mark item 20 data as missing. debq question 20 was not administered in REACH -- debq question 23 was repeated in its place
debq_data$debq_20 <- NA
debq_scored <- dataprepr::score_debq(debq_data, base_zero = TRUE, id = 'participant_id', na_handling = TRUE)
## SCPF Data ####
scpf_data <- data[, grepl('_id|scpf|visit_date', names(data))]
scpf_data <- scpf_data[c('participant_id', 'session_id', 'visit_date', names(scpf_data)[grepl('scpf', names(scpf_data))])]
# mark item 17 data as missing -- was on the questionnaire, but not in the article scoring is based on. It is in the preschool 10 item questionnaire from same group. Removing because not clear how to score.
scpf_data$scpf_17 <- NA
scpf_scored <- dataprepr::score_scpf(scpf_data, base_zero = TRUE, id = 'participant_id')
data = parent_visit_4_arm_1
# update name of participant ID column
names(data)[names(data) == 'record_id'] <- 'participant_id'
# add session column
data$session_id <- 'ses-1'
# merge with date data for V4
data <- merge(data, date_data[c('participant_id', 'v4_date')], by = 'participant_id', all.x = TRUE)
names(data)[names(data) == 'v4_date'] <- 'visit_date'
data['visit_date'] <- lubridate::as_date(data[['visit_date']])
library(dataprepr)
base_wd <- '/Users/azp271/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/b-childfoodlab_Shared/Active_Studies/MarketingResilienceRO1_8242020/ParticipantData'
# get data from REDCap directly (only will work for Alaina right now)
Sys.setenv(reach_redcap_key = keyring::key_get("reach_redcap_key"))
redcap_visit <- REDCapDM::redcap_data(uri = "https://redcap.ctsi.psu.edu/api/",
token = Sys.getenv("reach_redcap_key"))
# set paths for other directories
phenotype_wd <- file.path(base_wd, 'bids', 'phenotype')
#### Process data ####
redcap_visit_data <- redcap_visit[['data']]
redcap_visit_dict <- redcap_visit[['dictionary']]
# remove '.factor'
redcap_visit_data <- redcap_visit_data[, !grepl('.factor', names(redcap_visit_data))]
# Make ID column bids compliant: Convert record_id to strings padded with zeros and add "sub_"
redcap_visit_data['record_id'] <- sprintf("sub-%03d", redcap_visit_data[['record_id']])
# # subset events and remove unnecessary columns
redcap_long_wide <- function(event_name, data){
#subset
sub_dat <- data[data[['redcap_event_name']] == event_name, ]
#remove empty columns
sub_dat <- sub_dat[, !colSums(is.na(sub_dat)) == nrow(sub_dat)]
#return
return(sub_dat)
}
# Extract visit data
child_visit_1_arm_1 <- redcap_long_wide('child_visit_1_arm_1', redcap_visit_data)
parent_visit_1_arm_1 <- redcap_long_wide('parent_visit_1_arm_1', redcap_visit_data)
child_visit_2_arm_1 <- redcap_long_wide('child_visit_2_arm_1', redcap_visit_data)
parent_visit_2_arm_1 <- redcap_long_wide('parent_visit_2_arm_1', redcap_visit_data)
child_visit_3_arm_1 <- redcap_long_wide('child_visit_3_arm_1', redcap_visit_data)
parent_visit_3_arm_1 <- redcap_long_wide('parent_visit_3_arm_1', redcap_visit_data)
child_visit_4_arm_1 <- redcap_long_wide('child_visit_4_arm_1', redcap_visit_data)
parent_visit_4_arm_1 <- redcap_long_wide('parent_visit_4_arm_1', redcap_visit_data)
child_visit_5_arm_1 <- redcap_long_wide('child_visit_5_arm_1', redcap_visit_data)
parent_visit_5_arm_1 <- redcap_long_wide('parent_visit_5_arm_1', redcap_visit_data)
# make data.frame of dates, ages, and sex
date_data <- util_redcap_dates(child_v1 = child_visit_1_arm_1, child_v2 = child_visit_2_arm_1, child_v3 = child_visit_3_arm_1, child_v4 = child_visit_4_arm_1, child_v5 = child_visit_5_arm_1, parent_v1 = parent_visit_1_arm_1)
# visit survey data
child_v1_data <- util_redcap_child_v1(child_visit_1_arm_1)
source("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/cogNEATO_tools/dataREACHr/R/util_redcap_child_v1.R", echo = TRUE)
source("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/cogNEATO_tools/dataREACHr/R/util_redcap_child_v1.R", echo = TRUE)
# visit survey data
child_v1_data <- util_redcap_child_v1(child_visit_1_arm_1)
source("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/cogNEATO_tools/dataREACHr/R/util_redcap_child_v1.R", echo = TRUE)
# visit survey data
child_v1_data <- util_redcap_child_v1(child_visit_1_arm_1)
parent_v1_data <- util_redcap_parent_v1(parent_visit_1_arm_1, date_data)
data = parent_visit_1_arm_1
# update name of participant ID column
names(data)[names(data) == 'record_id'] <- 'participant_id'
# add session column
data['session_id'] <- 'ses-1'
# merge with date data for V1
data <- merge(data, date_data[c('participant_id', 'v1_date')], by = 'participant_id', all.x = TRUE)
names(data)[names(data) == 'v1_date'] <- 'visit_date'
data['visit_date'] <- lubridate::as_date(data[['visit_date']])
## Puberty Data ####
puberty_data <- data[, grep('_id|visit_date|prs|tanner|visit_date', names(data))]
# remove extra columns, add columns, and re-order
puberty_data['respondent'] <- 'parent'
names(puberty_data)[names(puberty_data) == 'prs_sex'] <- 'sex'
puberty_data <- puberty_data[c('participant_id', 'session_id', 'visit_date', 'respondent', 'sex', names(puberty_data)[grepl('prs|tanner', names(puberty_data))])]
# process puberty data
puberty_data <- util_format_puberty_data(puberty_data, respondent = 'parent')
pds_data <- puberty_data
base_zero = TRUE
respondent = 'parent'
male = 'male'
female = 'female'
id = 'participant_id'
# check base_zero is logical
if (!is.logical(base_zero)) {
stop("base_zero arg must be logical (TRUE/FALSE)")
}
# make a working dataset to preserve original data
pds_data_edits <- pds_data
if(class(pds_data_edits['sex'])[1] == 'haven_labelled'){
haven::labelled(pds_data_edits[['sex']], labels = NULL)
haven::labelled(pds_data_edits[['sex']], label = NULL)
}
male_arg = TRUE
female_arg = TRUE
# check number of unique values in dataset
nsex_unique <- length(unique(!is.na(pds_data_edits[['sex']])))
nsex_unique
pds_data_edits[['sex']]
unique(!is.na(pds_data_edits[['sex']]))
pds_data_edits[1, 'sex'] <- NA
unique(!is.na(pds_data_edits[['sex']]))
pds_data_edits[['sex']]
pds_data_edits[!is.na(pds_data_edits[['sex']]), 'sex']
unique(pds_data_edits[!is.na(pds_data_edits[['sex']]), 'sex'])
source("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/cogNEATO_tools/dataprepr/R/score_pds.R", echo = TRUE)
